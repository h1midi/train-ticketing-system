extends ../layout

block content
  head
    title= title
    link(rel='stylesheet', href='https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css')
    style.
      h1.trc {
        text-align: center;
      }

      form.trc {
        max-width: 600px;
        margin: 0 auto;
      }

      label.trc {
        display: block;
        font-weight: bold;
        margin-top: 10px;
      }

      input.trc[type="text"],
      input.trc[type="number"],
      select.trc {
        width: 100%;
        padding: 8px;
        margin: 5px 0;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
      }

      input.trc[type="datetime-local"] {
        width: 100%;
        padding: 8px;
        margin: 5px 0;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
      }

      h4.trc {
        margin-top: 20px;
        border-bottom: 1px solid #ccc;
        padding-bottom: 5px;
      }

      button.trc[type="submit"] {
        display: block;
        margin: 0 auto;
        margin-top: 20px;
        background-color: #007BFF;
        color: #fff;
        padding: 10px;
        border: none;
        border-radius: 3px;
        cursor: pointer;
      }

      button.trc[type="submit"]:hover {
        background-color: #0056b3;
      }
  form(action=`/trains/${train._id}/routes/add` method='post')
    .form-group
      label.trc(for='source') Source
      select#source.form-control(name='source' required)
        each station in stations
          option(value=`${station._id}`)= station.name
    .form-group
      label.trc(for='time') Time
      input#time.form-control(type='datetime-local' name='time' required)
    .form-group
      label.trc(for='price') Price
      input#price.form-control(type='number' name='price' required)
    .form-group
      label.trc Selected Stops:
      select.trc(name=`selected-stops-0`, multiple )
        each stop in []
          option(value=stop._id) #{stop.name}
    .form-group
      label.trc(for=`stops-0`) Intermediate Stops:
      select.trc(name=`stops-0`, multiple )
        each station in []
          option(value=station._id) #{station.name}
      br
      each stopData, stopIndex in selectedStops? selectedStops : []
        input.trc(type="hidden", name=`stops-${stopIndex}`, value=stopData.stop)
    button.trc(type='submit') Add Route
  script.
      const stopsDropdown = document.querySelectorAll('[name^="stops-"]');
      const selectedStops = [];
      fetch('/api/stations')
        .then((response) => response.json())
        .then((stations) => {
          stopsDropdown.forEach((dropdown) => {
            dropdown.addEventListener('change', handleStopSelection);
            stations.forEach((station, index) => {
              const option = document.createElement('option');
              option.value = station._id;
              option.name = index;
              option.textContent = station.name;
              dropdown.appendChild(option);
            });
          });
        })
        .catch((error) => {
          console.error('Failed to fetch stations:', error);
        });
      function handleStopSelection(event) {
        const selectedOption = event.target.options[event.target.selectedIndex];
        const selectedStop = selectedOption.value;
        const optionIndex = selectedOption.dataset.index;
        const dropdownName = event.target.name;
        const routeName = dropdownName.split('-')[0]; // 'source' or 'stops'
        const routeIndex = dropdownName.split('-')[1];
        // If the route array for the current index does not exist, create it


        const isStopSelected = selectedStops.some(
          (stopObj) => stopObj.stop === selectedStop
        );

        if (!isStopSelected) {
          if (routeName === 'source') {
            selectedStops[0] = { stop: selectedStop, index: optionIndex };
          } else if (routeName === 'stops') {
            selectedStops.push({ stop: selectedStop, index: optionIndex });
          }

          // Display the selected stops on top of the stop select.trc
          const stopsDropdown = document.querySelector(`[name="stops-0"]`);
          const selectedStopsDropdown = document.querySelector(`[name="selected-stops-0"]`);
          const selectedStopsForRoute = selectedStops;
          const unSelectedOptions = Array.from(stopsDropdown.options).filter((option) =>
            !selectedStopsForRoute.some((stopObj) => stopObj.stop === option.value)
          );
          const selectedOptions = Array.from(stopsDropdown.options).filter((option) =>
            selectedStopsForRoute.some((stopObj) => stopObj.stop === option.value)
          );
          // Remove all options from the dropdown and add the selected options on top
          stopsDropdown.innerHTML = '';
          unSelectedOptions.forEach((option) => stopsDropdown.appendChild(option));
          Array.from(stopsDropdown.options).forEach((option) => stopsDropdown.appendChild(option));

          selectedOptions.forEach((option) => selectedStopsDropdown.appendChild(option));
          Array.from(selectedStopsDropdown.options).forEach((option) => selectedStopsDropdown.appendChild(option));
        }
      }
